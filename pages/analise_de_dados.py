# Importando bibliotecas necess√°rias
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import plotly.express as px
import plotly.graph_objects as go
# Importando fun√ß√µes auxiliares
from utils.api_wiki import get_wikipedia_summary
from utils.get_info import *
from utils.prepracao_dados import *

# ------------------------------
# Vari√°veis Globais
# ------------------------------
DATA_FRAME = {}
PILOTO = "Lewis Hamilton"

def get_rgba(color_name, alpha=0.2):
    """Converte nome de cor ou hex em rgba transparente"""
    rgb = mcolors.to_rgb(color_name)  # retorna valores entre 0‚Äì1
    return f"rgba({int(rgb[0]*255)},{int(rgb[1]*255)},{int(rgb[2]*255)},{alpha})"

# ------------------------------
# Contexto
# ------------------------------
def contexto_conteudo() -> None:
    """Fun√ß√£o para renderizar o contexto do conte√∫do"""    

    # ---- Contexto Formula 1 ----
    col1, col2 = st.columns([1, 1], vertical_alignment="center")

    with col1:
        st.markdown(
            """
                <div class="conteudo">
                    <h2 class="titulo-2">Contexto</h2>
                    <div class="paragrafo">
                        <p class="text">A <strong>Formula 1</strong> √© considerada, por muitos, o √°pice do automobilismo mundial: a vitrine m√°xima onde talento, ousadia e disciplina se encontram em um espet√°culo que mistura velocidade, tecnologia e emo√ß√£o. Para a maioria dos pilotos, desde os primeiros passos nas <i>categorias de base</i> at√© os sonhos de inf√¢ncia, chegar √† <strong>Formula 1</strong> j√° √© uma conquista quase inimagin√°vel. Poucos conseguem superar todas as barreiras financeiras, f√≠sicas e mentais para finalmente se sentar no <i>cockpit</i> de um carro da categoria, competindo lado a lado com alguns dos maiores nomes da hist√≥ria do esporte.</p>
                        <p class="text">No entanto, estar presente no <i>grid</i> √© apenas o in√≠cio de um caminho √°rduo. Vencer na <strong>Formula 1</strong> exige n√£o apenas habilidade inata, mas tamb√©m uma combina√ß√£o rara de estrat√©gia, preparo f√≠sico impec√°vel, confian√ßa e, muitas vezes, estar no lugar certo na hora certa. Ainda mais raro √© transformar vit√≥rias isoladas em consist√™ncia ao longo de uma temporada inteira, alcan√ßando o t√£o sonhado t√≠tulo mundial. Esse feito √© reservado a uma minoria absoluta, um grupo seleto de pilotos que se eterniza nos livros da categoria.</p>
                    </div>
                </div>
            """,
            unsafe_allow_html=True,
        )
    with col2:
        st.image(
            "https://cdn.britannica.com/66/258266-050-BD8FC43A/Max-Verstappen-Grand-Prix-of-Singapore.jpg",
            use_container_width=True,
        )

    st.divider()

    # ---- Sobre Lewis Hamilton ----
    df_pilotos = get_info_pilotos()
    df_piloto = df_pilotos[df_pilotos['nome_completo'] == PILOTO]
    info_wiki = get_wikipedia_summary(df_piloto['wiki_url_piloto'].iloc[0])

    col3, col4 = st.columns([1, 2], vertical_alignment="center")

    with col3:
        st.image(info_wiki['image'], use_container_width=True)

    with col4:
        st.markdown(
            """
                <div class="conteudo">
                    <h2 class="titulo-2">Sobre Lewis Hamilton</h2>
                    <div class="paragrafo">
                        <p class="text"><strong>Lewis Hamilton</strong> √© um dos nomes mais marcantes da hist√≥ria da Formula 1. Nascido em Stevenage, Inglaterra, come√ßou sua trajet√≥ria no <i>kart</i> ainda muito jovem e rapidamente se destacou pela combina√ß√£o de talento natural e determina√ß√£o. Ao longo dos anos construiu uma carreira que o levou do sonho de crian√ßa ao patamar mais alto do automobilismo mundial, tornando-se n√£o apenas campe√£o, mas tamb√©m uma figura de grande impacto dentro e fora das pistas. Sua trajet√≥ria √© marcada por conquistas expressivas, recordes impressionantes e uma presen√ßa que ultrapassa o universo esportivo, consolidando-o como um dos grandes √≠cones da era moderna do esporte a motor.</p>
                        <p class="text">Nesta an√°lise, revisitaremos cada temporada do heptacampe√£o at√© 2024, √∫ltimo ano de sua longa passagem pela <strong>Mercedes</strong>, equipe com a qual conquistou seis de seus t√≠tulos. A quest√£o que guia nossa investiga√ß√£o √© clara: Hamilton √© realmente t√£o bom quanto parece ou foi apenas o carro, como muitas pessoas podem pensar?</p>
                    </div>
                </div>
            """,
            unsafe_allow_html=True,
        )
    
    st.divider()


# ------------------------------
# Dados Dispon√≠veis
# ------------------------------
def dados_conteudo() -> None:
    """Fun√ß√£o para renderizar a p√°gina de dados dispon√≠veis"""
    st.markdown(
        """
            <div class="conteudo">
                <h2 class="titulo-2">Dados Dispon√≠veis</h2>
                <h3 class="titulo-3">Fonte</h3>
                <div class="paragrafo">
                    <p class="text">
                        Os dados desta an√°lise foram retirados do 
                        <a href="https://www.kaggle.com/datasets/rohanrao/formula-1-world-championship-1950-2020/data">Kaggle</a>. 
                        As informa√ß√µes est√£o divididas em 14 arquivos, de forma normalizada. 
                        Por isso √© importante definir bem as perguntas que queremos responder, 
                        j√° que, dependendo delas, ser√° necess√°rio transformar essas tabelas em 
                        um √∫nico dataset para an√°lise.
                    </p>
                </div>
                <hr>
                <h3 class="titulo-3">Perguntas</h3>
                <div class="paragrafo">
                    <p class="text">
                        Como estamos analisando a <strong>Formula 1</strong> e focando em um piloto espec√≠fico, 
                        algumas perguntas guiam nosso estudo:
                    </p>
                    <ol>
                        <li>Quais s√£o as m√©tricas m√©dias do piloto no geral? Elas mudam ao longo dos anos?</li>
                        <li>O desempenho dele evoluiu de forma consistente? E atualmente, continua em crescimento?</li>
                        <li>Com as mudan√ßas de regulamento, houve quedas ou saltos de desempenho?</li>
                        <li>Comparado aos companheiros de equipe, ele se destacou?</li>
                        <li>Houve algum per√≠odo de domin√¢ncia? Essa domin√¢ncia veio mais do carro ou do piloto?</li>
                    </ol>
                    <p class="text">Nosso foco principal √© a quinta pergunta: <strong>o que significa ser dominante?</strong> Para chegar a essa resposta, come√ßaremos explorando as outras quest√µes e, ao final, verificaremos se √© poss√≠vel afirmar ou n√£o essa domin√¢ncia. √â prov√°vel que seja necess√°ria uma an√°lise mais ampla e detalhada, mas por enquanto, sabendo qual √© nosso objetivo, o pr√≥ximo passo √© a <strong>prepara√ß√£o de dados</strong>!</p>
                </div>
            </div>
        """,
        unsafe_allow_html=True,
    )


# ------------------------------
# Prepara√ß√£o de Dados
# ------------------------------
def preparacao_conteudo() -> None:
    """Fun√ß√£o para renderizar o conte√∫do da p√°gina de Tratamento de Dados"""
    st.markdown(
        """
            <div class="conteudo">
                <h2 class="titulo-2">Prepara√ß√£o de Dados</h2>
                <div class="paragrafo">
                    <p class="text">
                        No mundo real, os dados geralmente s√£o armazenados em bancos de dados normalizados,
                        o que nem sempre √© adequado para an√°lises diretas. 
                        Neste segmento, vamos observar como as tabelas est√£o distribu√≠das, 
                        identificar os indicadores e atributos necess√°rios para a an√°lise
                        e construir novos DataFrames unindo as tabelas de interesse. 
                        Al√©m disso, avaliaremos a possibilidade de criar colunas adicionais
                        que possam auxiliar em an√°lises futuras.
                    </p>
                </div>
                <hr>
                <h3 class="titulo-3">Visualizar DataFrames</h3>
                <div class="paragrafo">
                    <p class="text">
                        Como mencionado anteriormente, agora entraremos na parte de visualiza√ß√£o dos DataFrames. 
                        √â importante lembrar que, para analisarmos o desempenho do piloto, 
                        o foco principal s√£o as corridas. 
                        Com isso em mente, vamos explorar os DataFrames a seguir:
                    </p>
                </div>
            </div>
        """,
        unsafe_allow_html=True,
    )



    func_get_dataframe = {
        'Piloto': get_info_pilotos,
        'Equipe': get_info_time,
        'Corridas': get_info_corrida,
        'Tempo de Volta': get_lap_time,
        'Status': get_status_race,
        'Classifica√ß√£o dos Pilotos': get_drivers_standing,
        'Temporadas': get_seasons,
        'Pit Stops': get_pit_stops,
        'Resultados das Sprints': get_sprints_results,
        'Classifica√ß√£o das Equipes': get_time_standing,
        'Resultados das Corridas': get_race_results,
        'Circuitos': get_circuits,
        'Qualifica√ß√µes': get_qualifying
    }

    # Selectbox (apenas um por vez)
    df_exibir = st.selectbox(
        "Selecione o DataFrame para visualizar:", 
        list(func_get_dataframe.keys())
    )

    # Condicional para exibir o selecionado
    if df_exibir:  
        st.subheader(f"üìä {df_exibir}")
        df = func_get_dataframe[df_exibir]()  # executa a fun√ß√£o que retorna o dataframe
        st.dataframe(df)

    st.markdown(
        """
            <div class="conteudo">
                <hr>
                <div class="paragrafo">
                    <h3 class="titulo-3">DataFrame para An√°lise</h3>
                    <p class="text">
                        As tabelas <strong>Resultados das Sprints</strong> e 
                        <strong>Resultados das Corridas</strong> apresentam a mesma estrutura de colunas. 
                        Por isso, podemos <strong>concaten√°-las</strong> em um √∫nico DataFrame, 
                        obtendo uma vis√£o consolidada do desempenho dos pilotos e do total de pontos 
                        acumulados ao longo dos anos.
                        Embora as <strong>Sprints</strong> sejam provas mais curtas, 
                        e muitas vezes questionadas pelos pr√≥prios pilotos, 
                        seus pontos tamb√©m s√£o relevantes para a an√°lise e, portanto, ser√£o considerados.
                        Al√©m disso, vamos incluir o <strong>ano</strong> de cada corrida e o 
                        <strong>status final</strong> do piloto, permitindo identificar eventuais DNF 
                        (<i>Did Not Finish</i>) em sua carreira. Isso facilitar√° a filtragem dos per√≠odos 
                        em que Lewis Hamilton esteve ativo na Formula 1.
                        Por fim, construiremos dois DataFrames: 
                        um exclusivo para <strong>Lewis Hamilton</strong> e outro abrangendo 
                        <strong>todos os pilotos</strong>, de modo a possibilitar compara√ß√µes diretas 
                        com o heptacampe√£o.
                    </p>
                </div>
            </div>
        """,
        unsafe_allow_html=True,
    )

    col1, col2 = st.columns(2)

    DATA_FRAME['df_dados_corridas'] = merge_tabelas()
    DATA_FRAME['df_dados_LH'] = df_especifico()
    

    with col1:
        st.markdown("""
            <div class="conteudo">
                <h3 class="titulo-3" style="text-align: center;">Todas as Corridas (2007-2024)</h3>
            </div>
        """, unsafe_allow_html=True)

        st.dataframe(DATA_FRAME['df_dados_corridas'])

    with col2:
        st.markdown("""
            <div class="conteudo">
                <h3 class="titulo-3" style="text-align: center;">Lewis Hamilton Resultados</h3>
            </div>
        """, unsafe_allow_html=True)

        st.dataframe(DATA_FRAME['df_dados_LH'])

    st.markdown(
        """
            <div class="conteudo">
                <div class="paragrafo">
                    <p class="text">
                        Nestas tabelas est√£o reunidos os dados que servir√£o de base para a an√°lise. 
                        A tabela <strong>Todas as Corridas</strong> consolida informa√ß√µes das tabelas de 
                        <i>Resultados das Sprints</i>, <i>Resultados das Corridas</i>, <i>Corridas</i>, 
                        <i>Status</i>, <i>Equipes</i> e <i>Pilotos</i>. 
                        Al√©m disso, acrescentamos a coluna <i>"ganho_posicao"</i>, que indica 
                        quantas posi√ß√µes o piloto conquistou ao longo da prova em rela√ß√£o ao grid de largada. <br><br>
                        J√° a tabela <strong>Lewis Hamilton Resultados</strong> mant√©m a mesma estrutura, 
                        mas adiciona a coluna <i>"vitorias"</i>, permitindo identificar 
                        quantas vezes o piloto terminou em primeiro lugar. Essa m√©trica √© fundamental 
                        para compreender sua performance ao longo da carreira, j√° que a vit√≥ria 
                        √© um dos principais indicadores de dom√≠nio na Formula 1. <br><br>
                        Com essas informa√ß√µes, o pr√≥ximo passo √© verificar se existem valores nulos, 
                        garantindo que nossa an√°lise seja consistente e confi√°vel.
                    </p>
                </div>
                <hr>
                <h2 class="titulo-2">Tratamento de Dados</h2>
                <div class="paragrafo">
                    <p class="text">
                        No processo de tratamento, √© importante destacar que nem todo valor nulo 
                        representa uma inconsist√™ncia. Em alguns casos, a aus√™ncia de informa√ß√£o 
                        tamb√©m pode trazer insights relevantes. <br><br>
                        Nesta se√ß√£o, vamos verificar a quantidade de valores nulos em cada coluna dos DataFrames.
                    </p>
                </div>
            </div>
        """,
        unsafe_allow_html=True,
    )

    col3, col4 = st.columns(2)

    with col3:
        st.markdown("""
            <div class="conteudo">
                <h3 class="titulo-3" style="text-align: center;">üîé Valores Nulos por Coluna <br>(Todas as Corridas)</h3>
            </div>
        """, unsafe_allow_html=True)

        st.dataframe(DATA_FRAME['df_dados_corridas'].isnull().sum().reset_index().rename(columns={"index": "Coluna", 0: "Nulos"}))
    
    with col4:
        st.markdown("""
            <div class="conteudo">
                <h3 class="titulo-3" style="text-align: center;">üîé Valores Nulos por Coluna <br> (Lewis Hamilton Resultados)</h3>
            </div>
        """, unsafe_allow_html=True)

        st.dataframe(DATA_FRAME['df_dados_LH'].isnull().sum().reset_index().rename(columns={"index": "Coluna", 0: "Nulos"}))

    st.markdown(
        """
            <div class="conteudo">
                <div class="paragrafo">
                    <p class="text">
                        A an√°lise dos valores nulos mostra que as colunas <i>"ganho_posicao"</i> e 
                        <i>"posicao_final"</i> apresentam a mesma quantidade de registros ausentes. 
                        Isso pode parecer uma coincid√™ncia √† primeira vista, mas faz sentido dentro 
                        do contexto da Formula 1.                  
                        Nem todos os pilotos concluem a corrida: acidentes, falhas mec√¢nicas ou 
                        outros problemas podem levar ao <strong>DNF (Did Not Finish)</strong>. 
                        Nesses casos, a aus√™ncia de informa√ß√£o n√£o representa uma inconsist√™ncia, 
                        mas sim o reflexo da realidade da prova. <br><br>
                        Portanto, podemos considerar que a base de dados j√° passou por um tratamento 
                        inicial adequado.
                        Entretanto, antes de prosseguir, √© fundamental verificar se ainda existem 
                        <strong>linhas duplicadas</strong>, garantindo que nossa an√°lise n√£o seja 
                        enviesada por registros repetidos.
                    </p>
                </div>
            </div>
        """,
        unsafe_allow_html=True,
    )



    # ------ Duplicatas ------
    cols_hashable = [
        col for col in DATA_FRAME['df_dados_corridas'].columns
        if pd.api.types.is_hashable(DATA_FRAME['df_dados_corridas'][col].dropna().iloc[0])
    ]

    duplicatas_corridas = DATA_FRAME['df_dados_corridas'].duplicated(subset=cols_hashable).sum()
    duplicatas_lh = DATA_FRAME['df_dados_LH'].duplicated(subset=cols_hashable).sum()

    col5, col6 = st.columns(2)

    with col5:
        st.markdown("""
            <div class="conteudo">
                <h3 class="titulo-3" style="text-align: center;">üìå Duplicatas <br>(Todas as Corridas)</h3>
            </div>
        """, unsafe_allow_html=True)

        col1, col2, col3 = st.columns([1,2,1]) 
        with col2:
            st.metric("üîÅ Duplicatas", duplicatas_corridas, border=True)

    with col6:
        st.markdown("""
            <div class="conteudo">
                <h3 class="titulo-3" style="text-align: center;">üìå Duplicatas <br>(Lewis Hamilton Resultados)</h3>
            </div>
        """, unsafe_allow_html=True)

        col1, col2, col3 = st.columns([1,2,1])  

        with col2:
            st.metric("üîÅ Duplicatas",duplicatas_lh, border=True)

    st.markdown(
        """
            <div class="conteudo">
                <div class="paragrafo">
                    <p class="text">
                        A verifica√ß√£o de duplicatas mostra que n√£o h√° registros repetidos nos DataFrames. 
                        Esse resultado confirma que o processo de prepara√ß√£o inicial dos dados foi consistente, 
                        garantindo maior confiabilidade para as pr√≥ximas etapas.
                        Com essa base validada, podemos avan√ßar para a 
                        <strong>classifica√ß√£o das vari√°veis</strong> e a defini√ß√£o das visualiza√ß√µes 
                        mais adequadas para a an√°lise.
                    </p>
                </div>
            </div>
        """,
        unsafe_allow_html=True,
    )


# ------------------------------
# Classifica√ß√£o das Vari√°veis
# ------------------------------
def classificacao_conteudo() -> None:
    """Renderiza a classifica√ß√£o vari√°vel por vari√°vel, com justificativa"""
    st.markdown(
        """
            <div class="conteudo">
                <h2 class="titulo-2">Classifica√ß√£o das Vari√°veis</h2>
                <div class="paragrafo">
                    <p class="text">
                        Agora vamos classificar <strong>cada vari√°vel do dataset</strong> individualmente.  
                        Para cada coluna, ser√° apresentada sua categoria (qualitativa nominal, ordinal, 
                        quantitativa discreta ou cont√≠nua) acompanhada de uma <strong>justificativa</strong> 
                        explicando o porqu√™ da classifica√ß√£o.  
                        Isso ajuda a entender como elas podem ser usadas em an√°lises e quais 
                        t√©cnicas estat√≠sticas fazem sentido aplicar.
                    </p>
                </div>
                <hr>
                <h3 class="titulo-3">üìã Vari√°veis e seus Tipos</h3>
            </div>
        """, unsafe_allow_html=True
    )

    # Lista de vari√°veis com justificativas individuais
    variaveis = [
        # IDs (chaves t√©cnicas, n√£o usadas em an√°lise estat√≠stica direta)
        ("raceId", "ID / C√≥digo", "Identificador √∫nico da corrida. N√£o tem significado num√©rico, apenas relacional."),
        ("driverId", "ID / C√≥digo", "Identificador √∫nico do piloto, usado para integrar informa√ß√µes entre tabelas."),
        ("constructorId", "ID / C√≥digo", "Identificador √∫nico da equipe. Fun√ß√£o de chave estrangeira."),
        ("statusId", "ID / C√≥digo", "Identificador num√©rico do status da corrida. Sem interpreta√ß√£o estat√≠stica."),
        ("circuitId", "ID / C√≥digo", "Identificador √∫nico do circuito, valor t√©cnico para refer√™ncia."),
        ("resultId", "ID / C√≥digo", "Identificador √∫nico do resultado. Usado apenas para indexa√ß√£o."),

        # Vari√°veis Qualitativas Nominais 
        ("code", "Qualitativa Nominal", "C√≥digo de tr√™s letras do piloto (ex: HAM, VER). √â apenas um r√≥tulo."),
        ("nome_completo", "Qualitativa Nominal", "Nome completo do piloto, sem qualquer ordem impl√≠cita."),
        ("nome_equipe", "Qualitativa Nominal", "Nome da equipe (Mercedes, Ferrari). N√£o existe hierarquia."),
        ("name_circuit", "Qualitativa Nominal", "Nome do circuito (ex: Monza, Interlagos). Categoria descritiva."),
        ("status_race", "Qualitativa Nominal", "Situa√ß√£o final (Finished, DNF, Accident). Categorias distintas, sem ordem."),
        ("tipo_corrida", "Qualitativa Nominal", "Tipo da corrida (Sprint ou Principal). Classifica√ß√£o bin√°ria sem hierarquia."),
        ("cores", "Qualitativa Nominal", "Cor associada √† equipe. Apenas descritivo, sem significado num√©rico."),

        # Vari√°veis Quantitativas Discretas 
        ("posicao_grid", "Quantitativa Discreta", "Posi√ß√£o de largada, n√∫mero inteiro. Usado em c√°lculos como ganho de posi√ß√£o."),
        ("posicao_final", "Quantitativa Discreta", "Posi√ß√£o final da corrida. Valores inteiros (1¬∫, 2¬∫, 3¬∫), n√£o admite fra√ß√µes."),
        ("positionOrder", "Quantitativa Discreta", "Ordem oficial registrada pela FIA. Contagem inteira de posi√ß√£o."),
        ("ano", "Quantitativa Discreta", "Ano da corrida. √â uma contagem inteira e n√£o assume valores intermedi√°rios."),
        ("numero_do_piloto", "Quantitativa Discreta", "N√∫mero fixo do carro do piloto. √â inteiro e n√£o fracion√°vel."),
        ("laps", "Quantitativa Discreta", "N√∫mero de voltas completadas. √â uma contagem natural (1, 2, 3...)."),
        ("pontos", "Quantitativa Discreta", "Pontos obtidos segundo regulamento. Valores definidos e inteiros."),
        ("ganho_posicao", "Quantitativa Discreta", "Diferen√ßa entre posi√ß√µes de largada e chegada. Valor inteiro (positivo ou negativo)."),
        ("vitorias", "Quantitativa Discreta", "Um booleano em 0/1 representa se Hamilton venceu (1) ou n√£o venceu (0) uma corrida. √â considerado quantitativa discreta por assumir apenas dois valores inteiros poss√≠veis e permitir c√°lculos estat√≠sticos, como soma e m√©dia."),
        ("rodada", "Quantitativa Discreta", "Contagem dos GP's de um ano. √â uma vari√°vel de contagem inteira"),

        # Vari√°veis Quantitativas Cont√≠nuas 
        ("tempo_volta", "Quantitativa Cont√≠nua", "Tempo de volta medido em escala cont√≠nua. Entre dois tempos sempre existe outro."),
        ("ms_volta", "Quantitativa Cont√≠nua", "Tempo de volta registrado em milissegundos. Representa medida cont√≠nua."),
        ("volta_rapida_tempo", "Quantitativa Cont√≠nua", "Tempo da volta mais r√°pida, grandeza cont√≠nua com precis√£o infinita."),
        ("data_corrida", "Quantitativa Cont√≠nua", "A data da corrida pode ser representada numericamente (como dias ou segundos em rela√ß√£o a uma origem no tempo). Dessa forma, assume valores em uma escala cont√≠nua e permite compara√ß√µes e c√°lculos de intervalos entre corridas.")

    ]


    # Criar dataframe com justificativas
    df_variaveis = pd.DataFrame(variaveis, columns=["Vari√°vel", "Tipo", "Justificativa"])

    st.dataframe(df_variaveis, use_container_width=True)

    st.markdown(
        """
            <div class="conteudo">
                <hr>
                <div class="paragrafo">
                    <p class="text">
                        Ap√≥s a classifica√ß√£o detalhada das vari√°veis, temos uma vis√£o clara de seus 
                        pap√©is dentro do conjunto de dados. Essa organiza√ß√£o √© essencial para orientar 
                        a escolha das t√©cnicas estat√≠sticas e das visualiza√ß√µes mais adequadas. 
                        Com essa base s√≥lida, podemos avan√ßar com maior seguran√ßa para a etapa de 
                        <strong>an√°lise explorat√≥ria</strong>, extraindo padr√µes, rela√ß√µes e insights 
                        relevantes sobre o desempenho dos pilotos e equipes na Formula 1.
                    </p>
                </div>
            </div>
        """, unsafe_allow_html=True
    )


# ------------------------------
# An√°lise dos Dados
# ------------------------------
def analise_conteudo() -> None:
    """Fun√ß√£o para renderizar a an√°lise explorat√≥ria"""
    st.markdown(
        """
            <div class="conteudo">
                <h2 class="titulo-2">An√°lise dos Dados</h2>]
                <div class="paragrafo">
                    <p class="text">
                        Com o intuito de fazermos uma an√°lise dos dados que possuimos sobre o Lewis Hamilton e sua carreira, o primeiro passo √© verificar a sua consist√™ncia ao longo das suas temporadas. Vale ressaltar que 
                    </p>
                </div>
                <h3 class="titulo-3">üìà Consist√™ncia e Evolu√ß√£o</h2>
                <div class="paragrafo">
                    <p class="text">
                        Aqui analisamos a evolu√ß√£o de Lewis Hamilton ao longo das temporadas,
                        observando medidas centrais (m√©dia, mediana, moda) e tamb√©m medidas
                        de dispers√£o (desvio padr√£o). Isso nos ajuda a avaliar a regularidade
                        do piloto em diferentes fases da carreira.
                    </p>
                </div>
            </div>
        """, unsafe_allow_html=True
    )

    # Exemplo: calcular m√©tricas por temporada
    resumo_hamilton = (
        DATA_FRAME['df_dados_LH']
        .groupby("ano")["posicao_final"]
        .agg(["mean","median","std"])
        .reset_index()
    )

    # üîπ Adiciona colunas de equipe e cor
    resumo_hamilton["time"] = resumo_hamilton["ano"].apply(
        lambda x: "McLaren" if x <= 2012 else "Mercedes"
    )
    resumo_hamilton["cores"] = resumo_hamilton["time"].map({
        "McLaren": "orange",
        "Mercedes": "silver"
    })

    col1, col2 = st.columns([0.3,0.7], vertical_alignment='center')

    with col1:
        st.dataframe(resumo_hamilton)

    with col2:
        # Gr√°fico interativo
        fig = go.Figure()

        for equipe in resumo_hamilton["time"].unique():
            df_equipe = resumo_hamilton[resumo_hamilton["time"] == equipe]
            cor = df_equipe["cores"].iloc[0]

            # Linha da m√©dia
            fig.add_trace(go.Scatter(
                x=df_equipe["ano"],
                y=df_equipe["mean"],
                mode="lines+markers",
                name=f"M√©dia ({equipe})",
                line=dict(color=cor, width=3),
                marker=dict(size=8, color=cor)
            ))

            # Faixa de desvio padr√£o com transpar√™ncia
            fig.add_trace(go.Scatter(
                x=pd.concat([df_equipe["ano"], df_equipe["ano"][::-1]]),
                y=pd.concat([df_equipe["mean"] + df_equipe["std"], 
                            (df_equipe["mean"] - df_equipe["std"])[::-1]]),
                fill="toself",
                fillcolor=get_rgba(cor, 0.2),
                line=dict(color="rgba(255,255,255,0)"),
                hoverinfo="skip",
                name=f"¬±1 Desvio Padr√£o ({equipe})"
            ))

        # Layout
        fig.update_layout(
            title="üìà Evolu√ß√£o da Posi√ß√£o M√©dia do Hamilton por Ano",
            xaxis_title="Ano",
            yaxis_title="Posi√ß√£o Final (m√©dia)",
            template="plotly_white",
            hovermode="x unified",
            legend=dict(bordercolor="gray", borderwidth=0.5)
        )

        st.plotly_chart(fig, use_container_width=True)


# ------------------------------
# Renderizando tudo
# ------------------------------
def conteudo() -> None:
    """Fun√ß√£o para renderizar o conte√∫do da p√°gina de An√°lise de Dados"""
    st.markdown(
        """
        <div class="conteudo">
            <h1>An√°lise de Dados</h1>
        </div>
        """,
        unsafe_allow_html=True,
    )
    
    contextTab, dadosTab, prepTab, classificacaoTab, analiseTab, conclusaoTab = st.tabs(
        [
            ":material/contextual_token: Contexto",
            ":material/table: Dados Dispon√≠veis",
            ":material/healing: Prepara√ß√£o",
            ":material/search_insights: Classifica√ß√£o de Vari√°veis",
            ":material/analytics: An√°lise",
            ":material/pin_end: Conclus√£o"
        ]
    )
    
    with contextTab:
        contexto_conteudo()
    with dadosTab:
        dados_conteudo()
    with prepTab:
        preparacao_conteudo()
    with classificacaoTab:
        classificacao_conteudo()
    with analiseTab:
        analise_conteudo()


conteudo()
